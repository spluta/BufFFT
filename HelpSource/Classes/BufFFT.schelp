TITLE:: BufFFT
summary:: performs an FFT on a buffer upon receiving a trigger from BufFFTTrigger or BufFFTTrigger2
categories:: UGens>FFT
related:: Classes/BufFFT, Classes/BufIFFT

DESCRIPTION::
Performs an FFT on the buffer in an FFT chain upon receiving a trigger (non-negative buffer number) in that chain.

BufFFT differs from FFT in that it, along with BufFFTTrigger, BufFFTTrigger2, BufFFT_BufCopy, and BufIFFT, is designed to perform FFT operations on a buffer rather than an audio stream. This allows time stretching operations and operations on non chrono-linear sets of grains, two processes that were very difficult and inefficient with the standard FFT implementaton. Luckily, all standard SuperCollider PhaseVocoder PV operations should still function normally with BufFFT.

Because of the implementation, audio will start immediately rather than being delayed by one fft frame.

CLASSMETHODS::

METHOD:: new

ARGUMENT:: buffer
the FFT chain buffer

ARGUMENT:: wintype
window type for the fft frame. 0 is sine. 1 is hann. -1 is rectangular

ARGUMENT:: winsize
The windowed audio frames are usually the same size as the buffer. If you wish the FFT to be zero-padded then you can specify a window size smaller than the actual buffer size (e.g. window size 1024 with buffer size 2048). Both values must still be a power of two. Leave this at its default of zero for no zero-padding.



INSTANCEMETHODS::


EXAMPLES::

code::
//classic PV Time Stretch
(
~overlaps = 4;
~fftSize = 8192;
d = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

e = Array.fill(~overlaps, {Buffer.alloc(s, ~fftSize)});
)

(
//the duration multiplier
arg stretch = 4;

e.do{|item| item.zero};

{
	var accumChain;

	var chain = BufFFTTrigger(e, 1/~overlaps, (0..(~overlaps-1)), ~overlaps);

	var frameDur = ~fftSize/SampleRate.ir;

	var demand = Dseries(0, ~fftSize/(stretch*~overlaps));
	var pos = Demand.kr(chain, 0, demandUGens: demand);

	chain = BufFFT_BufCopy(chain, d, pos, BufRateScale.kr(d));
	chain = BufFFT(chain);
	accumChain = LocalBuf(~fftSize);
	accumChain = PV_AccumPhase(accumChain, chain);

	chain = PV_CopyPhase(chain, accumChain);

	Mix(BufIFFT(chain, 0)).dup*0.8*Env([1,1],[BufDur.kr(d)*stretch+(~fftSize/SampleRate.ir)]).kr(doneAction:2);

}.play
)

::

code::
//PaulStretch
(
~overlaps = 2;
~fftSize = 16384;
d = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

e = Array.fill(~overlaps, {Buffer.alloc(s, ~fftSize)});
)

(
//the duration multiplier
arg stretch = 50;

e.do{|item| item.zero};

{

	var chain = BufFFTTrigger(e, 1/~overlaps, (0..(~overlaps-1)), ~overlaps);

	var demand = Dseries(0, ~fftSize/(stretch*~overlaps));
	var pos = Demand.kr(chain, 0, demandUGens: demand);

	chain = BufFFT_BufCopy(chain, d, pos, BufRateScale.kr(d));
	chain = BufFFT(chain);
	chain = PV_Diffuser(chain, chain>(-1));

	Mix(BufIFFT(chain, 0)).dup*0.8*Env([1,1],[BufDur.kr(d)*stretch]).kr(doneAction:2);

}.play
)
::

code::
//grains of brickwalled FFT frames
(
~maxGrains = 40;
~fftSize = 4096;
d = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

e = Array.fill(~maxGrains, {Buffer.alloc(s, ~fftSize)});
)

(
e.do{|item| item.zero};

{
	var sig;
	var trig = PulseDivider.kr(Dust.kr(40), ~maxGrains, (0..~maxGrains-1));


	var chain = BufFFTTrigger2(e, trig);

	var frameDur = ~fftSize/SampleRate.ir;

	var pos = TRand.kr(0, BufFrames.kr(d), trig);

	chain = BufFFT_BufCopy(chain, d, pos, BufRateScale.kr(d));

	chain = BufFFT(chain, 1);
	chain = PV_BrickWall(chain, TExpRand.kr(0.0075,0.05, trig));
	chain = PV_BrickWall(chain, TExpRand.kr(-0.0075,-0.05, trig));
	sig = BufIFFT(chain, 1);

	Mix(Pan2.ar(sig, TRand.kr(-1,1,chain)));

}.play
)
::
