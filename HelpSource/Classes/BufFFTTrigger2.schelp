class:: BufFFTTrigger2
summary:: Outputs the necessary signal for BufFFT chains, creating the trigger that initiates the chain
categories:: UGens>FFT
related:: Classes/FFTTrigger, Classes/BufFFTTrigger

DESCRIPTION::
Outputs the necessary trigger signal for FFT chains which use BufFFT, creating the trigger that initiates the chain. Different from BufFFTTrigger, each instance of BufFFTTrigger2 receives a standard SuperCollider trigger that ignites the FFT chain. This allows FFT grains not in the standard grid of 2^n overlapping grains, instead each able to start at the top of any control block.

CLASSMETHODS::

method:: new

ARGUMENT:: buffer
the buffer that will store the FFT data

ARGUMENT:: trigger
an incoming kr trigger that ignites the FFT chain

EXAMPLES::

code::
//grains of brickwalled FFT frames
(
~maxGrains = 50;
~fftSize = 4096;
d = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

e = Array.fill(~maxGrains, {Buffer.alloc(s, ~fftSize)});
)

(
e.do{|item| item.zero};

{
	var sig;
	var trig = PulseDivider.kr(Dust.kr(40), ~maxGrains, (0..~maxGrains-1));

	//BufFFTTrigger2 receives the triggers, one for each chain buffer, and outputs the correct information for the FFT Chain
	var chain = BufFFTTrigger2(e, trig);

	var frameDur = ~fftSize/SampleRate.ir;

	var pos = TRand.kr(0, BufFrames.kr(d), trig);

	chain = BufFFT_BufCopy(chain, d, pos, BufRateScale.kr(d));

	chain = BufFFT(chain);
	chain = PV_BrickWall(chain, TExpRand.kr(0.0075,0.05, trig));
	chain = PV_BrickWall(chain, TExpRand.kr(-0.0075,-0.05, trig));
	sig = BufIFFT(chain, 0);

	Mix(Pan2.ar(sig, TRand.kr(-1,1,chain)));

}.play
)
::
