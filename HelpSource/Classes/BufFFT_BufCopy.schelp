TITLE:: BufFFT_BufCopy
summary:: copies a small section of an audio buffer into a power of two buffer for use in an FFT chain
categories:: UGens>FFT
related:: Classes/BufFFT, Classes/BufIFFT

DESCRIPTION::
A necessary companion to BufFFT. Copies a small section of an existing audio buffer into the power of 2 FFT chain buffer for FFT/PV processing.


CLASSMETHODS::

METHOD:: new

ARGUMENT:: chainBuf
the local buffer/fft chain trigger

ARGUMENT:: sourceBuf
The larger audio buffer from which we are copying.

ARGUMENT:: startFrame
the sample frame in bufferA from which to start copying audio

ARGUMENT:: bufRateScale
The audio rate of the larger audio buffer. BufFFT uses quadratic interpolation when copying the buffer.





returns:: (describe returnvalue here)


INSTANCEMETHODS::


EXAMPLES::

code::
//PaulStretch
(
~overlaps = 2;
~fftSize = 16384;
d = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

e = Array.fill(~overlaps, {Buffer.alloc(s, ~fftSize)});
)

(
//the duration multiplier
arg stretch = 30;

e.do{|item| item.zero};

{

	var chain = BufFFTTrigger(e, 1/~overlaps, (0..(~overlaps-1)), ~overlaps);

	var demand = Dseries(0, ~fftSize/(stretch*~overlaps));
	var pos = Demand.kr(chain, 0, demandUGens: demand);

	//BufFFT_BufCopy copies a chunk of audio from the sourceBuf to the chainBuf before FFT processing
	chain = BufFFT_BufCopy(chain, d, pos, BufRateScale.kr(d));
	chain = BufFFT(chain);
	chain = PV_Diffuser(chain, chain>(-1));

	Mix(BufIFFT(chain, 0)).dup*0.8*Env([1,1],[BufDur.kr(d)*stretch+(~fftSize/SampleRate.ir)]).kr(doneAction:2);

}.play
)
::
